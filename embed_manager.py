from sentence_transformers import SentenceTransformer
import logging
from typing import List, Union

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class EmbedManager:
    def __init__(self):
        """
        Initialize the EmbedManager with the all-MiniLM-L6-v2 model.
        This model provides 384-dimensional embeddings.
        """
        try:
            logger.info("Loading sentence transformer model...")
            self.model = SentenceTransformer('all-MiniLM-L6-v2')
            logger.info("Model loaded successfully")
        except Exception as e:
            logger.error(f"Error loading model: {str(e)}")
            raise

    def generate_embedding(self, text: Union[str, List[str]]) -> Union[List[float], List[List[float]]]:
        """
        Generate embeddings for the input text using the all-MiniLM-L6-v2 model.
        
        Args:
            text: Input text or list of texts to generate embeddings for
            
        Returns:
            List of embeddings (384-dimensional vectors) or list of lists of embeddings
        """
        try:
            if isinstance(text, str):
                # Single text input
                embedding = self.model.encode(text, convert_to_list=True)
                return embedding
            else:
                # Multiple texts input
                embeddings = self.model.encode(text, convert_to_list=True)
                return embeddings
        except Exception as e:
            logger.error(f"Error generating embedding: {str(e)}")
            raise

    def get_embedding_dimension(self) -> int:
        """
        Get the dimension of the embeddings generated by this model.
        
        Returns:
            int: The dimension of the embeddings (384 for all-MiniLM-L6-v2)
        """
        return 384 